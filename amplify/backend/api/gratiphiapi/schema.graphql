type Sponsor
  @model
  @auth(
    rules: [
      { allow: public }
      {
        allow: groups
        groups: ["gratiphiAdmin", "gratiphiUser"]
        operations: [read, create, update]
      }
    ]
  ) {
  id: ID!
  name: String!
  logo: String
  identifier: String!
  locations: [Location]
    @connection(keyName: "locationBySponsorId", fields: ["id"])
  donees: [Donee] @connection(keyName: "doneeBySponsorId", fields: ["id"])
}

type Location
  @model
  @key(
    name: "locationBySponsorId"
    fields: ["sponsorId"]
    queryField: "locationBySponsorId"
  )
  @auth(
    rules: [
      { allow: public }
      {
        allow: groups
        groups: ["gratiphiUser", "alimentaSuperAdmin"]
        operations: [read, create, update]
      }
      {
        allow: groups
        groupsField: "groups"
        operations: [read, create, update]
      }
    ]
  ) {
  id: ID!
  name: String!
  identifier: String!
  country: String!
  sponsorId: ID!
  sponsor: Sponsor @connection(fields: ["sponsorId"])
  donees: [Donee] @connection(keyName: "doneeByLocationId", fields: ["id"])
  donations: [Donation]
    @connection(keyName: "donationByLocationId", fields: ["id"])
  gratifications: [Gratification]
    @connection(keyName: "gratificationByLocation", fields: ["id"])
  groups: [String]!
}

type User
  @model
  @auth(
    rules: [
      { allow: public }
      {
        allow: groups
        groups: ["gratiphiAdmin", "gratiphiUser"]
        operations: [read, create, update]
      }
    ]
  ) {
  id: ID!
  name: String!
  lastName: String!
  dateOfBirth: AWSDate!
  email: String!
  stripeId: String
  donations: [Donation] @connection(keyName: "donationByUserId", fields: ["id"])
}

type Donee
  @model
  @key(
    name: "doneeBySponsorId"
    fields: ["sponsorId"]
    queryField: "doneeBySponsorId"
  )
  @key(
    name: "doneeByLocationId"
    fields: ["locationId"]
    queryField: "doneeByLocationId"
  )
  @auth(
    rules: [
      { allow: public }
      { allow: groups, groups: ["gratiphiUser"], operations: [read] }
      {
        allow: groups
        groupsField: "groups"
        operations: [read, create, update]
      }
    ]
  ) {
  id: ID!
  firstName: String!
  lastName: String!
  birthDate: AWSDate!
  smallBiography: String!
  fullBiography: String!
  profilePhoto: String!
  identifier: String!
  gender: String!
  sponsorId: ID!
  sponsor: Sponsor @connection(fields: ["sponsorId"])
  locationId: ID!
  location: Location @connection(fields: ["locationId"])
  donations: [Donation]
    @connection(keyName: "donationByDoneeId", fields: ["id"])
  questionAnswer: [QuestionAnswer]
    @connection(keyName: "questionAnswerByDoneeId", fields: ["id"])
  gratifications: [Gratification]
    @connection(keyName: "gratificationByDoneeByDate", fields: ["id"])
  groups: [String]!
}

type Question
  @model
  @auth(
    rules: [
      { allow: public }
      {
        allow: groups
        groups: ["gratiphiAdmin", "gratiphiUser"]
        operations: [read, create, update]
      }
    ]
  ) {
  id: ID!
  question: String!
}

type QuestionAnswer
  @model
  @key(
    name: "questionAnswerByQuestionId"
    fields: ["questionId"]
    queryField: "questionAnswerByQuestionId"
  )
  @key(
    name: "questionAnswerByDoneeId"
    fields: ["doneeId"]
    queryField: "questionAnswerByDoneeId"
  )
  @auth(
    rules: [
      { allow: public }
      {
        allow: groups
        groups: ["gratiphiAdmin", "gratiphiUser"]
        operations: [read, create, update]
      }
    ]
  ) {
  id: ID!
  answer: String!
  questionId: ID!
  question: Question! @connection(fields: ["questionId"])
  doneeId: ID!
  donee: Donee! @connection(fields: ["doneeId"])
}

type Donation
  @model
  @key(
    name: "donationByUserId"
    fields: ["userId"]
    queryField: "donationByUserId"
  )
  @key(
    name: "donationByDoneeId"
    fields: ["doneeId"]
    queryField: "donationByDoneeId"
  )
  @key(
    name: "donationByLocationId"
    fields: ["locationId"]
    queryField: "donationByLocationId"
  )
  @key(
    name: "donationByGratificationId"
    fields: ["gratificationId"]
    queryField: "donationByGratificationId"
  )
  # @key(fields: ["locationId", "gratification"])
  @auth(
    rules: [
      { allow: public }
      {
        allow: groups
        groups: ["gratiphiAdmin", "gratiphiUser"]
        operations: [read, create, update]
      }
    ]
  ) {
  id: ID!
  userId: ID!
  user: User @connection(fields: ["userId"])
  doneeId: ID!
  donee: Donee @connection(fields: ["doneeId"])
  amount: Float
  stripeTransactionId: String!
  locationId: ID!
  location: Location @connection(fields: ["locationId"])
  gratificationId: ID!
  gratification: Gratification @connection(fields: ["gratificationId"])
}

type Gratification
  @model
  @key(
    name: "gratificationByLocation"
    fields: ["locationId"]
    queryField: "gratificationByLocation"
  )
  @key(
    name: "gratificationByDoneeByDate"
    fields: ["doneeId", "createdAt"]
    queryField: "gratificationByDoneeByDate"
  )
  @key(
    name: "gratificationByUrl"
    fields: ["gratificationUrl"]
    queryField: "gratificationByUrl"
  )
  @auth(
    rules: [
      { allow: public }
      {
        allow: groups
        groups: ["gratiphiAdmin", "gratiphiUser"]
        operations: [read, create, update]
      }
    ]
  ) {
  id: ID!
  gratificationUrl: String
  donationId: ID
  donations: [Donation]
    @connection(keyName: "donationByGratificationId", fields: ["id"])
  locationId: ID!
  location: Location @connection(fields: ["locationId"])
  doneeId: ID!
  donee: Donee @connection(fields: ["doneeId"])
  createdAt: AWSDateTime!
}

type Query {
  retrieveDonee(doneeId: String): String @function(name: "retrieveDonee-dev")
}

type Mutation {
  createPaymentIntent(email: String, userId: String, amount: Float): String
    @function(name: "createPaymentIntent-dev")
  processDonation(
    doneeName: String
    userFirstName: String
    userEmail: String
    amount: Float
  ): String @function(name: "processDonation-dev")
}
