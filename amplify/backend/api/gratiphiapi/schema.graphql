type Sponsor @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  logo: String
  identifier: String!
  locations: [Location] @connection(keyName: "bySponsorId", fields: ["id"])
  donees: [Donee] @connection(keyName: "bySponsorId", fields: ["id"])
}

type Location
  @model
  @key(name: "bySponsorId", fields: ["sponsorId"], queryField: "bySponsorId")
  @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  identifier: String!
  sponsorId: ID!
  sponsor: Sponsor @connection(fields: ["sponsorId"])
  donees: [Donee] @connection(keyName: "byLocationId", fields: ["id"])
  donations: [Donation] @connection(keyName: "byLocationId", fields: ["id"])
}

type User @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  lastName: String!
  dateOfBirth: AWSDate!
  email: String!
  stripeId: String
  donations: [Donation] @connection(keyName: "donatioByUserId", fields: ["id"])
}

type Donee
  @model
  @key(name: "bySponsorId", fields: ["sponsorId"], queryField: "bySponsorId")
  @key(name: "byLocationId", fields: ["locationId"], queryField: "byLocationId")
  @auth(rules: [{ allow: public }]) {
  id: ID!
  firstName: String!
  lastName: String!
  birthDate: AWSDate!
  smallBiography: String!
  fullBiography: String!
  profilePhoto: String!
  identifier: String!
  gender: String!
  sponsorId: ID!
  sponsor: Sponsor @connection(fields: ["sponsorId"])
  locationId: ID!
  location: Location @connection(fields: ["locationId"])
  donations: [Donation] @connection(keyName: "byDoneeId", fields: ["id"])
  questionAnswer: [QuestionAnswer]
    @connection(keyName: "byDoneeId", fields: ["id"])
}

type Question @model @auth(rules: [{ allow: public }]) {
  id: ID!
  question: String!
}

type QuestionAnswer
  @model
  @key(
    name: "questionAnswerByQuestionId"
    fields: ["questionId"]
    queryField: "questionAnswerByQuestionId"
  )
  @key(name: "byDoneeId", fields: ["doneeId"], queryField: "byDoneeId")
  @auth(rules: [{ allow: public }]) {
  id: ID!
  answer: String!
  questionId: ID!
  question: Question! @connection(fields: ["questionId"])
  doneeId: ID!
  donee: Donee! @connection(fields: ["doneeId"])
}

type Donation
  @model
  @key(
    name: "donatioByUserId"
    fields: ["userId"]
    queryField: "donatioByUserId"
  )
  @key(name: "byDoneeId", fields: ["doneeId"], queryField: "byDoneeId")
  @key(name: "byLocationId", fields: ["locationId"], queryField: "byLocationId")
  @key(
    name: "byGratificationId"
    fields: ["gratificationId"]
    queryField: "byGratificationId"
  )
  # @key(fields: ["locationId", "gratificationId"])
  @auth(rules: [{ allow: public }]) {
  id: ID!
  userId: ID!
  user: User @connection(fields: ["userId"])
  doneeId: ID!
  donee: Donee @connection(fields: ["doneeId"])
  amount: Float
  stripeTransactionId: String!
  locationId: ID!
  location: Location @connection(fields: ["locationId"])
  gratificationId: ID!
  gratification: Gratification @connection(fields: ["gratificationId"])
}

type Gratification
  @model
  @key(name: "bySent", fields: ["isGratificationSent"], queryField: "bySent")
  # @key(
  #   name: "gratificationByDonation"
  #   fields: ["donation"]
  #   queryField: "gratificationByDonation"
  # )
  @key(name: "byLocation", fields: ["locationId"], queryField: "byLocation")
  @key(name: "byDonee", fields: ["doneeId"], queryField: "byDonee")
  @auth(rules: [{ allow: public }]) {
  id: ID!
  gratificationUrl: String
  isGratificationSent: String
  donationId: ID!
  donations: [Donation]
    @connection(keyName: "byGratificationId", fields: ["id"])
  locationId: ID!
  location: Location @connection(fields: ["locationId"])
  doneeId: ID!
  donee: Donee @connection(fields: ["doneeId"])
}

type Mutation {
  createPaymentIntent(email: String, userId: String, amount: Float): String
    @function(name: "createPaymentIntent-dev")
}
